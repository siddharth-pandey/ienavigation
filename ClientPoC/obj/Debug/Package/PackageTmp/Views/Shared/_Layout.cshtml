<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js">
<!--<![endif]-->
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>@ViewBag.Title - Demo Application</title>
    @Styles.Render("~/Content/css")

    <style>
        .loaderwrapper {
            border: 1px solid grey;
            width: 100%;
            height: 100%;
            position: relative;
        }

        .loaderimg {
            position: absolute;
            left: 50%;
            top: 50%;
            margin-left: -21px; /* -1 * image width / 2 */
            margin-top: -15px; /* -1 * image height / 2 */
            display: block;
        }

        .loaderwrappermain {
            position: absolute;
            left: 50%;
            top: 40%;
            margin-left: -21px; /* -1 * image width / 2 */
            margin-top: -15px; /* -1 * image height / 2 */
            display: block;
            position: absolute;
            background: grey;
            width: 2%;
            height: 6%;
            opacity: 0.4;
            border: 1px solid black;
        }
    </style>
    <script>
        @*if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
            var msViewportStyle = document.createElement('style');
            msViewportStyle.appendChild(
                document.createTextNode('@-ms-viewport{width:auto!important}'));
            document.querySelector('head').appendChild(msViewportStyle);
        }*@
    </script>
    <script src="~/Scripts/respond.js"></script>

    <script src="~/Scripts/jquery-1.10.2.js"></script>
    <script src="~/Scripts/sammy-0.7.4.js"></script>
    <script src="~/Scripts/historyjs/json2.js"></script>
    @*<script src="~/Scripts/historyjs/amplify.store.js"></script>*@
    @*<script src="~/Scripts/historyjs/history.adapter.jquery.js"></script>*@
    @*<script src="~/Scripts/historyjs/jquery.history.js"></script>*@
    @*<script src="~/Scripts/historyjs/history.html4.js"></script>*@

    @*<script src="~/Scripts/app/layout.js"></script>*@
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <div class="navbar-brand">Demo</div>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
                <div id="loginPartial">
                    @Html.Partial("_LoginPartial")
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div id="shell" style="position: relative;">
            @RenderBody()
        </div>
        <div id="loaderMain" class="loaderwrappermain" style="display: none;">
            <img src="../../Content/Images/ajax-loader.gif" alt="" class="loaderimg" />
        </div>
    </div>

    <script type="text/javascript">
        function InjectContentToShell(content) {
            $('#shell').fadeOut(50, function () {
                $(this).empty().append(content);
            }).fadeIn(30);
        }


        $(document).ready(function () {

            var app = $.sammy('#shell', function () {
                var content = null;
                var self = this;
                function Partial(options, context) {
                    var cxt = context;

                    if (options) {

                        $.ajax({
                            url: options.url,
                            type: options.type || 'GET',
                            dataType: options.datatype || 'html',
                            async: true,
                            data: options.dataToPost,
                            beforeSend: function () {
                                $("#loaderMain").show();
                            },
                            complete: function () {
                                $("#loaderMain").hide();
                            },
                            cache: false,
                        }).success(function (response, status, xhr) {
                            var ct = xhr.getResponseHeader("content-type") || "";
                            if (ct.indexOf('html') > -1) {
                                // returned result is of type html, so act accordingly
                                if (options.selector == undefined) {
                                    if (response != null) {
                                        if (options.redirectRoute != undefined) {
                                            content = response;
                                            cxt.redirect(options.redirectRoute);
                                        } else {
                                            InjectContentToShell(response);
                                        }
                                    }
                                } else {
                                    $(options.selector).empty().append(response);
                                }
                            } else if (ct.indexOf('json') > -1) {
                                // returned result is of type json, so act accordingly
                            }
                        }).fail(function (e) {
                            console.log(e);
                        });
                    }
                }

                this.get('#/', function (context) {
                    var options = {
                        url: '/Account/Login',
                        type: 'GET',
                    };
                    Partial(options, context);
                });

                this.get('#/home', function (context) {
                    var flag = this.params['flag'];
                    if (content == null) {
                        var options = {
                            url: '/Home/Index',
                            type: 'GET'
                        };
                        Partial(options, context);
                    } else {
                        InjectContentToShell(content);
                        content = null;
                    }
                });

                this.post('#/login', function (context) {
                    var options = {
                        url: '/Account/Login',
                        type: 'POST',
                        dataToPost: $('#loginform').serialize(),
                        redirectRoute: '#/home'
                    };
                    Partial(options, context);
                });

                this.post('#/summaryview', function (context) {
                    alert("Details reference: " + this.params['reference']);


                    var summaryViewReference = this.params['SummaryViewReference'],
                        formId = summaryViewReference.replace('/', ''),
                        //detailsViewReference = instance.find('#DetailViewId').val(),
                        layoutWidth = this.params['Width'],
                        layoutHeight = this.params['Height'],
                        detailViewId = this.params['DetailViewId'].replace('/', '_');

                    var dataToPost = $('form#' + formId).serialize();

                    var options = {
                        url: '/Home/Details',
                        type: "POST",
                        dataType: "html",
                        dataToPost: dataToPost,
                        redirectRoute: '#/details/' + detailViewId + "/" + layoutWidth + "/" + layoutHeight
                };

                    Partial(options, context);

                    //var customUrl = "/Home/Details?detailViewReference=" + detailsViewReference + "&width=" + layoutWidth + "&height=" + layoutHeight;
                });

                this.get('#/details/:reference/:width/:height', function (context) {
                    if (content == null) {
                        var options = {
                            url: '/Home/Details?detailViewReference=' + this.params['reference'].replace('_', '/') + "&width=" + this.params['width'] + "&height=" + this.params['height'],
                            type: 'GET'
                        };
                        Partial(options, context);
                    } else {
                        InjectContentToShell(content);
                        content = null;
                    }
                });

            });

            $(function () {
                app.run('#/');
            });

        });

        // Avoid `console` errors in browsers that lack a console.
        (function () {
            var method;
            var noop = function () { };
            var methods = [
                'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
                'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
                'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
                'timeStamp', 'trace', 'warn'
            ];
            var length = methods.length;
            var console = (window.console = window.console || {});

            while (length--) {
                method = methods[length];

                // Only stub undefined methods.
                if (!console[method]) {
                    console[method] = noop;
                }
            }
        }());
    </script>



    @RenderSection("scripts", required: false)

</body>
</html>
